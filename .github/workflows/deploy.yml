# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Dvdrental Service CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      # - name: Generate Git Tag
      #   id: generate_tag
      #   run: |
      #     VERSION_PREFIX="v"
      #     VERSION_MAJOR_MINOR="1.0"
      #     VERSION_PATH=$(git tag --list "${VERSION_PREFIX}${VERSION_MAJOR_MINOR}.*" --sort=-version:refname | head -n 1 | grep -oE '[0-9]+$')

      #     if [ -z "$VERSION_PATCH" ]; then
      #     VERSION_PATCH=0
      #     PREVIOUS_VERSION_PATCH=0
      #     else
      #       PREVIOUS_VERSION_PATCH=VERSION_PATCH
      #       VERSION_PATCH=$((VERSION_PATCH + 1))

      #     fi
      #     NEW_TAG="${VERSION_PREFIX}${VERSION_MAJOR_MINOR}.${VERSION_PATCH}"
      #     PREVIOUS_TAG="${VERSION_PREFIX}${VERSION_MAJOR_MINOR}.${PREVIOUS_VERSION_PATCH}"
      #     echo "Generated new tag: $NEW_TAG"
      #     echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
      # - name: Push Git Tag
      #   run: |
      #     git config user.name "superhan-dev"
      #     git config user.email "superhan.dev@gmail.com"
      #     git tag $NEW_TAG
      #     git push origin $NEW_TAG
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Excetute Gradle build
        run: ./gradlew build
      - name: Login to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Build Docker image
        run: docker build -t dvdrental-backend:latest
      - name: Publish image to docker hub
        run:
          docker push awesomehan/dvdrental-backend:latest
          # docker push awesomehan/dvdrental-backend:$NEW_TAG

  # deploy:
  #   needs: build
  #   runs-on: [ip-172-31-35-33]
  #   steps:
  #     - name: Pull Image from docker hub
  #       run: docker pull awesomehan/dvdrental-backend:latest
  #     - name: Remove docker previous image
  #       run: docker rm -f dvdrental-backend:$PREVIOUS_TAG
  #     - name: Run docker container
  #       run: docker run -d -p 8080:8080 --name dvdrental-backend awesomehan/dvdtental-backend:latest
